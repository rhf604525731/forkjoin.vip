<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>飞仔的博客</title>
  <subtitle>阿飞一亩三分地</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://forkjoin.vip/"/>
  <updated>2016-07-27T07:41:14.170Z</updated>
  <id>http://forkjoin.vip/</id>
  
  <author>
    <name>飞仔</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>第一章MySQL架构与历史</title>
    <link href="http://forkjoin.vip/2016/07/27/%E7%AC%AC%E4%B8%80%E7%AB%A0MySQL%E6%9E%B6%E6%9E%84%E4%B8%8E%E5%8E%86%E5%8F%B2-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html"/>
    <id>http://forkjoin.vip/2016/07/27/第一章MySQL架构与历史-学习笔记.html</id>
    <published>2016-07-27T07:28:05.000Z</published>
    <updated>2016-07-27T07:41:14.170Z</updated>
    
    <content type="html">&lt;h1 id=&quot;高性能MySQL-第3版&quot;&gt;&lt;a href=&quot;#高性能MySQL-第3版&quot; class=&quot;headerlink&quot; title=&quot;高性能MySQL(第3版)&quot;&gt;&lt;/a&gt;高性能MySQL(第3版)&lt;/h1&gt;&lt;h2 id=&quot;第一章-MySQL架构与历史&quot;&gt;&lt;a href=&quot;#第一章-MySQL架构与历史&quot; class=&quot;headerlink&quot; title=&quot;第一章 MySQL架构与历史&quot;&gt;&lt;/a&gt;第一章 MySQL架构与历史&lt;/h2&gt;&lt;h3 id=&quot;1-1-MySQL逻辑架构&quot;&gt;&lt;a href=&quot;#1-1-MySQL逻辑架构&quot; class=&quot;headerlink&quot; title=&quot;1.1 MySQL逻辑架构&quot;&gt;&lt;/a&gt;1.1 MySQL逻辑架构&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://o9u7ezg3r.bkt.clouddn.com/MySQL逻辑架构图.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;MySQL的逻辑架构图共分为三层：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一层：服务层为客户端提供连接、授权认证、安全等&lt;/li&gt;
&lt;li&gt;第二层：核心服务层，包括查询解析、分析、优化、缓存以及所有的内置函数，所有跨存储引擎的功能都在这层实现:存储过程、触发器、视图等。&lt;/li&gt;
&lt;li&gt;第三层：存储引擎负责数据的存储和提取，通过api和核心服务层通信(第二层)，各存储引擎之间不会相互通信，而是简单的响应上层服务的请求。&lt;h4 id=&quot;1-1-1-连接管理与安全&quot;&gt;&lt;a href=&quot;#1-1-1-连接管理与安全&quot; class=&quot;headerlink&quot; title=&quot;1.1.1 连接管理与安全&quot;&gt;&lt;/a&gt;1.1.1 连接管理与安全&lt;/h4&gt;&lt;img src=&quot;http://o9u7ezg3r.bkt.clouddn.com/MySQL连接管理.png&quot; alt=&quot;image&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;每个连接操作都在服务器进程中的某一个线程中完成&lt;/li&gt;
&lt;li&gt;服务器会缓存线程，不需要为每一个新建连接创建或销毁线程&lt;blockquote&gt;
&lt;p&gt;服务器进程中有类似线程池的概念，以提高处理的性能&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;http://o9u7ezg3r.bkt.clouddn.com/MySQL安全认证流程.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;客户端连接服务器时,对身份进行认证确认身份，包括用户名、密码、主机地址等。还可以使用SSL的证书认证&lt;/li&gt;
&lt;li&gt;身份认证通过连接成功后，还会验证是否㕛执行某个特定查询的权限&lt;h4 id=&quot;1-1-2-优化与执行&quot;&gt;&lt;a href=&quot;#1-1-2-优化与执行&quot; class=&quot;headerlink&quot; title=&quot;1.1.2 优化与执行&quot;&gt;&lt;/a&gt;1.1.2 优化与执行&lt;/h4&gt;&lt;img src=&quot;http://o9u7ezg3r.bkt.clouddn.com/SQL执行流程.png&quot; alt=&quot;image&quot;&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href=&quot;http://www.orczhou.com/index.php/2012/11/mysql-innodb-source-code-optimization-1/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SQL语句解析详解&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;1-2-并发控制&quot;&gt;&lt;a href=&quot;#1-2-并发控制&quot; class=&quot;headerlink&quot; title=&quot;1.2 并发控制&quot;&gt;&lt;/a&gt;1.2 并发控制&lt;/h3&gt;&lt;p&gt;无论何时，只要有多个查询需要在同一时刻修改数据，都会产生并发控制问题。此次只讨论MySQL在两个层面的并发控制：&lt;strong&gt;服务器层&lt;/strong&gt; &lt;em&gt;与&lt;/em&gt; &lt;strong&gt;存储引擎层&lt;/strong&gt;。&lt;/p&gt;
&lt;h4 id=&quot;1-2-1-读写锁&quot;&gt;&lt;a href=&quot;#1-2-1-读写锁&quot; class=&quot;headerlink&quot; title=&quot;1.2.1 读写锁&quot;&gt;&lt;/a&gt;1.2.1 读写锁&lt;/h4&gt;&lt;p&gt;处理并发控制，有两种类型的锁通来解决问题。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;共享锁(shared lock) 也叫 读锁(read lock)&lt;/li&gt;
&lt;li&gt;排他锁(exclusive lock) 也叫 写锁(write lock)&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;读锁&lt;/strong&gt;：是共享的，或者说是相互不阻塞的。多个客户端在同一时刻可以同时读取同一个资源，而互不干扰。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;写锁&lt;/strong&gt;：是排他的，一个写锁会阻塞其他的写锁和读锁&lt;h4 id=&quot;1-2-2-锁粒度&quot;&gt;&lt;a href=&quot;#1-2-2-锁粒度&quot; class=&quot;headerlink&quot; title=&quot;1.2.2 锁粒度&quot;&gt;&lt;/a&gt;1.2.2 锁粒度&lt;/h4&gt;提高资源并发性的一种方式就是减少锁定资源的范围，缩小锁的粒度，只对修改的数据进行锁定。锁的粒度越小，并发性能越高，同时服务器越消耗资源。&lt;br&gt;&lt;strong&gt;锁策略&lt;/strong&gt;：就是在锁的开销和数据安全性之间寻求平衡，这种平衡也会影响到性能。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;MySQL提供了多种锁选择。每种存储引擎都可以实现自己的锁策略和锁粒度。其中最重要的两种锁策略：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;表锁(table lock)&lt;/strong&gt;：是MySQL中最重要的锁策略，并且开销最小。它会锁定整张表，一个用户在对表进行写操作，需要先获得锁，会阻塞其他用户的读/写操作。只有没有写锁时，其他读取的用户才能获取读锁，读锁之间互不阻塞。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;行级锁(row lock)&lt;/strong&gt;：行级锁可以最大程度支持并发处理,同时也带来了最大的锁开销。行级锁只在存储引擎层(&lt;code&gt;InnoDB/XtraDB&lt;/code&gt;)实现,而服务层没有实现。服务器层完全不了解存储引擎中的锁实现。&lt;h3 id=&quot;1-3-事务&quot;&gt;&lt;a href=&quot;#1-3-事务&quot; class=&quot;headerlink&quot; title=&quot;1.3 事务&quot;&gt;&lt;/a&gt;1.3 事务&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;事务就是一组原子性的SQL或者说是一个独立的工作单元。事务内的语句，要么全部执行成功，要么全部执行失败&lt;/p&gt;
&lt;h4 id=&quot;1-3-1-事务的四个基本要素：ACID&quot;&gt;&lt;a href=&quot;#1-3-1-事务的四个基本要素：ACID&quot; class=&quot;headerlink&quot; title=&quot;1.3.1 事务的四个基本要素：ACID&quot;&gt;&lt;/a&gt;1.3.1 事务的四个基本要素：ACID&lt;/h4&gt;&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;原子性 (atomicity)&lt;/strong&gt;：一个事务必须是一个不可分割的最小工作单元，整个事务的所有操作要么全部成功，要么全部失败回滚&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;一致性(consistency)&lt;/strong&gt;：数据库总是从一个一致性的状态转换到另一个一致性状态&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;隔离性(isolation)&lt;/strong&gt;：一个事务所做的修改在最终提交前，对其他事务是不可见的。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;持久性(durability)&lt;/strong&gt;：一旦事务提交，则其所做的修改就会永久保存到数据库&lt;h4 id=&quot;1-3-2-隔离级别&quot;&gt;&lt;a href=&quot;#1-3-2-隔离级别&quot; class=&quot;headerlink&quot; title=&quot;1.3.2 隔离级别&quot;&gt;&lt;/a&gt;1.3.2 隔离级别&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;SQL标准中定义了四种隔离级别。较低级别的隔离通常可以执行更高的并发，系统的开销也更低。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;READ UNCOMMITTED(未提交读)&lt;/strong&gt;：事务中的修改，即使没有提交，对其他事务也都是可见的。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;READ COMMITTED(提交读)&lt;/strong&gt;：大多数数据库的默认隔离级别(MySQL除外)。一个事务开始时，只能看见已经提交的事务所做的修改。也就是说，一个事务从开始到提交前，所做的任何修改对其他事务不可见。也叫作不可重复读。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;REPEATABLE READ(可重复读)&lt;/strong&gt;：是MySQL的默认事务隔离级别。解决了脏读问题。保证在同一事务中多次读取同样的记录结果是一致。但无法解决幻读的问题。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SERIALIZABLE(可串行化)&lt;/strong&gt;：是最高的隔离级别。通过强制事务串行执行，避免了幻读的问题。它会在读取的每一行数据上都加锁，会导致大量的锁竞争和超时。实际中使用很少，除非特殊情况必须采用除外。&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;幻读&lt;/strong&gt;：指当某个事务在读取某个范围内的记录时，另外一个事务又在该范围内插入了新记录，当之前的事务再次读取该范围的记录时，会产生幻行(Phantom Row)。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;脏读&lt;/strong&gt;：事务可以读取未提交的数据&lt;/p&gt;
&lt;p&gt;InnoDB和XtraDB存储引擎通过多版本并发控制(MVCC,Multiversion Concurrency Control)解决了幻读的问题。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;1-3-3-死锁&quot;&gt;&lt;a href=&quot;#1-3-3-死锁&quot; class=&quot;headerlink&quot; title=&quot;1.3.3 死锁&quot;&gt;&lt;/a&gt;1.3.3 死锁&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;死锁&lt;/strong&gt;：是指两个或多个事务在同一资源上相互占用，并请求锁定对方占用的资源，从而导致恶性循环的现象。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;多个事务试图以不同顺序锁定资源时，就会产生死锁。&lt;/li&gt;
&lt;li&gt;多个事务同时锁定同一资源时，也会产生死锁。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;死锁处理机制：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;死锁检测机制&lt;/li&gt;
&lt;li&gt;死锁超时机制&lt;h4 id=&quot;1-3-4-事务日志&quot;&gt;&lt;a href=&quot;#1-3-4-事务日志&quot; class=&quot;headerlink&quot; title=&quot;1.3.4 事务日志&quot;&gt;&lt;/a&gt;1.3.4 事务日志&lt;/h4&gt;事务日志可以提高事务的效率。存储引擎在修改表的数据时只需要修改其内存拷贝，再把修改行为记录到持久的硬盘的事务日志中，而不用每次都将数据本身持久到磁盘。&lt;br&gt;事务日志持久后，内存中被修改的数据在后台慢慢刷回到磁盘。通常称之为 &lt;strong&gt;预写式日志(Write-Ahead Logging)&lt;/strong&gt;&lt;h4 id=&quot;1-3-5-MySQL中的事务&quot;&gt;&lt;a href=&quot;#1-3-5-MySQL中的事务&quot; class=&quot;headerlink&quot; title=&quot;1.3.5 MySQL中的事务&quot;&gt;&lt;/a&gt;1.3.5 MySQL中的事务&lt;/h4&gt;MySQL提供了两种事务型存储引擎:InnoDB和NDB Cluster。&lt;h5 id=&quot;自动提交-AUTOCOMMIT&quot;&gt;&lt;a href=&quot;#自动提交-AUTOCOMMIT&quot; class=&quot;headerlink&quot; title=&quot;自动提交(AUTOCOMMIT)&quot;&gt;&lt;/a&gt;自动提交(AUTOCOMMIT)&lt;/h5&gt;默认采用自动提交(AUTOCOMMIT)模式。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;查看当前的自动提交设置：&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;mysql&amp;gt; show variables like &amp;apos;autocommit&amp;apos;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;+---------------+-------+&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;| Variable_name | Value |&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;+---------------+-------+&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;| autocommit    | ON    |&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;+---------------+-------+&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;1 row in set&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1或者ON表示启用,0或者OFF表示禁用。当AUTOCOMMIT=0时；所有的查询都在一个事务中,可以显示的执行COMMIT提交或者ROLLBACK回滚。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;设置当前会话的事务为手动提交:&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;mysql&amp;gt; set autocommit =0; //设置autocommit =0;关闭自动提交事务&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Query OK, 0 rows affected&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;mysql&amp;gt; show variables like &amp;apos;autocommit&amp;apos;;//再次查看，发现已经变化&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;+---------------+-------+&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;| Variable_name | Value |&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;+---------------+-------+&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;| autocommit    | OFF   |&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;+---------------+-------+&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;1 row in set&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;设置MySQL全局级别的AUTOCOMMIT：&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;mysql&amp;gt; select @@global.autocommit;//查看全局的设置，发现是自动提交&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;+---------------------+&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;| @@global.autocommit |&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;+---------------------+&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;|                   1 |&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;+---------------------+&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;最有效且省事的方法：&lt;br&gt;在MySQL的配置文件中设置，然后重启mysql服务&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[mysqld]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;init_connect=&amp;apos;SET autocommit=0&amp;apos;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;==&lt;strong&gt;在事务中混合使用存储引擎&lt;/strong&gt;==&lt;/p&gt;
&lt;p&gt;==MySQL服务器层不管理事务，事务是有下层的存储引擎实现的。所以在同一个事务中，使用多种存储引擎是不可靠的。==&lt;/p&gt;
&lt;h3 id=&quot;1-4-多版本并发控制-MVCC&quot;&gt;&lt;a href=&quot;#1-4-多版本并发控制-MVCC&quot; class=&quot;headerlink&quot; title=&quot;1.4 多版本并发控制(MVCC)&quot;&gt;&lt;/a&gt;1.4 多版本并发控制(MVCC)&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/chenpingzhao/p/5065316.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.cnblogs.com/chenpingzhao/p/5065316.html&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;1-5-MySQL的存储引擎&quot;&gt;&lt;a href=&quot;#1-5-MySQL的存储引擎&quot; class=&quot;headerlink&quot; title=&quot;1.5 MySQL的存储引擎&quot;&gt;&lt;/a&gt;1.5 MySQL的存储引擎&lt;/h3&gt;&lt;p&gt;MySQL将每个数据库(也成为schema)保存为数据目录下的一个子目录。数据库中的每个表至少对应数据库目录中的一个文件(也可能是多个，取决于存储引擎)。&lt;br&gt;因此，所使用操作系统的大小写敏感性决定了数据库名和表名的大小写敏感性。在大多数Unix中数据库名和表名对大小写敏感，而在Windows中对大小写不敏感。一个显著的例外情况是Mac OS X，它基于Unix但使用默认文件系统类型(HFS+)，对大小写不敏感。然而，Mac OS X也支持UFS卷，该卷对大小写敏感，就像Unix一样&lt;/p&gt;
&lt;p&gt;变量&lt;strong&gt;lower_case_file_system&lt;/strong&gt;说明是否数据目录所在的文件系统对文件名的大小写敏感。ON说明对文件名的大小写不敏感，OFF表示敏感。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在Linux中查看：&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;mysql&amp;gt; show variables like &amp;apos;lower%&amp;apos;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;+------------------------+-------+&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;| Variable_name          | Value |&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;+------------------------+-------+&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;| lower_case_file_system | OFF   |&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;| lower_case_table_names | 0     |&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;+------------------------+-------+&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2 rows in set&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;在windows中查看：&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;mysql&amp;gt; show variables like &amp;apos;lower%&amp;apos;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;+------------------------+-------+&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;| Variable_name          | Value |&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;+------------------------+-------+&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;| lower_case_file_system | ON    |&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;| lower_case_table_names | 1     |&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;+------------------------+-------+&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2 rows in set&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;高性能MySQL-第3版&quot;&gt;&lt;a href=&quot;#高性能MySQL-第3版&quot; class=&quot;headerlink&quot; title=&quot;高性能MySQL(第3版)&quot;&gt;&lt;/a&gt;高性能MySQL(第3版)&lt;/h1&gt;&lt;h2 id=&quot;第一章-MySQL架构与历史&quot;&gt;&lt;a href
    
    </summary>
    
      <category term="高性能MySQL(第3版)学习笔记" scheme="http://forkjoin.vip/categories/%E9%AB%98%E6%80%A7%E8%83%BDMySQL-%E7%AC%AC3%E7%89%88-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="高性能MySQL" scheme="http://forkjoin.vip/tags/%E9%AB%98%E6%80%A7%E8%83%BDMySQL/"/>
    
      <category term="MySQL优化" scheme="http://forkjoin.vip/tags/MySQL%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Hexo搭建Github静态博客系列---Hexo基础环境搭建</title>
    <link href="http://forkjoin.vip/2016/07/16/Hexo%E6%90%AD%E5%BB%BAGithub%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E7%B3%BB%E5%88%97-Hexo%E5%9F%BA%E7%A1%80%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA.html"/>
    <id>http://forkjoin.vip/2016/07/16/Hexo搭建Github静态博客系列-Hexo基础环境搭建.html</id>
    <published>2016-07-16T03:42:45.000Z</published>
    <updated>2016-07-18T10:26:09.236Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Hexo简介&quot;&gt;&lt;a href=&quot;#Hexo简介&quot; class=&quot;headerlink&quot; title=&quot;Hexo简介&quot;&gt;&lt;/a&gt;Hexo简介&lt;/h2&gt;&lt;p&gt;Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。&lt;/p&gt;
&lt;h2 id=&quot;环境准备&quot;&gt;&lt;a href=&quot;#环境准备&quot; class=&quot;headerlink&quot; title=&quot;环境准备&quot;&gt;&lt;/a&gt;环境准备&lt;/h2&gt;&lt;p&gt;Hexo是基于Node.js开发的，首先需要在个人电脑上安装&lt;a href=&quot;https://nodejs.org/&quot; title=&quot;官网&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Node.js&lt;/a&gt;程序,下载自己电脑系统对应位数(64位),(32位)的最新版本。因为Hexo生成的静态HTML文件我们要发布到github上,所以&lt;a href=&quot;http://git-scm.com/&quot; title=&quot;官网&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Git&lt;/a&gt; 程序也是要安装的。&lt;/p&gt;
&lt;h3 id=&quot;git安装&quot;&gt;&lt;a href=&quot;#git安装&quot; class=&quot;headerlink&quot; title=&quot;git安装&quot;&gt;&lt;/a&gt;git安装&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/git-for-windows/git/releases/download/v2.9.0.windows.1/Git-2.9.0-64-bit.exe&quot; title=&quot;官网下载地址&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;64-bit Git for Windows Setup&lt;/a&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;双击exe安装程序，一步一步执行到最后安装完成，推荐使用默认配置项。&lt;br&gt;安装成功后会出现在&lt;strong&gt;“开始”–&amp;gt;”所有程序”–&amp;gt;”Git”菜单中&lt;/strong&gt;。如图：&lt;br&gt;&lt;img src=&quot;http://o9u7ezg3r.bkt.clouddn.com/git_menu.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;打开 Git CMD 或者 Git Bash 输入:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;git --version&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果能正常执行并返回git的版本号，说明git的安装没有问题&lt;/p&gt;
&lt;h3 id=&quot;nodejs安装&quot;&gt;&lt;a href=&quot;#nodejs安装&quot; class=&quot;headerlink&quot; title=&quot;nodejs安装&quot;&gt;&lt;/a&gt;nodejs安装&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://nodejs.org/dist/v4.4.7/node-v4.4.7-x64.msi&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Node.js for Windows (x64)&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;安装Hexo&quot;&gt;&lt;a href=&quot;#安装Hexo&quot; class=&quot;headerlink&quot; title=&quot;安装Hexo&quot;&gt;&lt;/a&gt;安装Hexo&lt;/h3&gt;&lt;p&gt;如果您的电脑中已经安装上述必备程序，那么恭喜您！接下来只需要使用 npm 即可完成 Hexo 的安装&lt;/p&gt;
&lt;p&gt;打开 Git Bash 输入：&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;install -g hexo-cli&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt; 我个人喜欢这种 linux shell 风格的命令行窗口。&lt;/p&gt;
&lt;blockquote&gt;
&lt;h6 id=&quot;参考引用&quot;&gt;&lt;a href=&quot;#参考引用&quot; class=&quot;headerlink&quot; title=&quot;参考引用&quot;&gt;&lt;/a&gt;参考引用&lt;/h6&gt;&lt;p&gt;Hexo中文文档 &lt;a href=&quot;https://hexo.io/zh-cn/docs/index.html&quot; title=&quot;Hexo中文文档&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://hexo.io/zh-cn/docs/index.html&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Hexo简介&quot;&gt;&lt;a href=&quot;#Hexo简介&quot; class=&quot;headerlink&quot; title=&quot;Hexo简介&quot;&gt;&lt;/a&gt;Hexo简介&lt;/h2&gt;&lt;p&gt;Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几
    
    </summary>
    
      <category term="Hexo搭建Github静态博客" scheme="http://forkjoin.vip/categories/Hexo%E6%90%AD%E5%BB%BAGithub%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="Hexo" scheme="http://forkjoin.vip/tags/Hexo/"/>
    
      <category term="Github" scheme="http://forkjoin.vip/tags/Github/"/>
    
  </entry>
  
</feed>
